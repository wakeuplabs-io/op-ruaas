name: Cross-Platform Cli Rust Build and Release

on:
  push:
    tags:
      - "*"

permissions:
  contents: write

jobs:
    helm_release:
      name: Zip and Release helm files
      runs-on: ubuntu-latest

      steps:
        - name: Checkout Code
          uses: actions/checkout@v3

        - name: Set Version from Tag
          shell: bash
          run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

        - name: Create ZIP and TAR files
          shell: bash
          run: |
            outdir="infra-helm"
            echo "DIRNAME=$outdir"

            (cd infra/helm && zip -r "../../$outdir.zip" .)
            echo "ZIP=$outdir.zip" >> $GITHUB_ENV
                
            (cd infra/helm && tar -czf "../../$outdir.tar.gz" .)
            echo "TAR=$outdir.tar.gz" >> $GITHUB_ENV

        - name: Release
          uses: softprops/action-gh-release@v1
          with:
            files: |
                ${{ env.TAR }}

        - name: Release
          uses: softprops/action-gh-release@v1
          with:
            files: |
                    ${{ env.ZIP }}
    
    aws_release:
      name: Zip and Release aws terraform files
      runs-on: ubuntu-latest

      steps:
        - name: Checkout Code
          uses: actions/checkout@v3

        - name: Set Version from Tag
          shell: bash
          run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

        - name: Create ZIP and TAR files
          shell: bash
          run: |
            outdir="infra-aws"
            echo "DIRNAME=$outdir"

            (cd infra/aws && zip -r "../../$outdir.zip" .)
            echo "ZIP=$outdir.zip" >> $GITHUB_ENV
                
            (cd infra/aws && tar -czf "../../$outdir.tar.gz" .)
            echo "TAR=$outdir.tar.gz" >> $GITHUB_ENV


        - name: Release
          uses: softprops/action-gh-release@v1
          with:
            files: |
                ${{ env.TAR }}

        - name: Release
          uses: softprops/action-gh-release@v1
          with:
            files: |
                    ${{ env.ZIP }}

    cli_release:
      name: Build and Release for Multiple Platforms
      runs-on: ubuntu-latest
  
      strategy:
        matrix:
          include:
            - target: x86_64-unknown-linux-gnu
              extension: tar.gz
            - target: x86_64-apple-darwin
              extension: tar.gz
            - target: x86_64-pc-windows-gnu
              extension: zip
  
      steps:
        - name: Checkout Code
          uses: actions/checkout@v3
  
        - name: Set Version from Tag
          shell: bash
          run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
  
        - name: Install zig
          uses: korandoru/setup-zig@v1
          with:
            zig-version: 0.13.0
  
        - name: Build Project
          run: zig build --package opraas_cli --release --target ${{ matrix.target }}
  
        - name: Package Binary
          shell: bash
          run: |
            # Define binary name and output directory
            binary_name="opruaas"
            output_dir="${binary_name}-${{ env.VERSION }}-${{ matrix.target }}"
  
            # Create directory and move the binary
            mkdir "$output_dir"
            if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
              mv "target/${{ matrix.target }}/release/$binary_name.exe" "$output_dir/"
            else
              mv "target/${{ matrix.target }}/release/$binary_name" "$output_dir/"
            fi
  
            # Package the output directory
            if [ "${{ matrix.extension }}" = "zip" ]; then
              zip -r "${output_dir}.zip" "$output_dir"
              echo "ASSET=${output_dir}.zip" >> $GITHUB_ENV
            else
              tar -czf "${output_dir}.tar.gz" "$output_dir"
              echo "ASSET=${output_dir}.tar.gz" >> $GITHUB_ENV
            fi
  
        - name: Upload Release Asset
          uses: softprops/action-gh-release@v1
          with:
            files: ${{ env.ASSET }}
            tag_name: ${{ github.ref_name }}
            draft: false
            prerelease: false
 
    # npm_release:
    #     needs: 
    #       - cli_release
    #       - aws_release
    #       - helm_release

    #     runs-on: ubuntu-latest

    #     steps:
    #     - name: Checkout code
    #       uses: actions/checkout@v2

    #     - name: Set up Node.js
    #       uses: actions/setup-node@v3
    #       with:
    #         node-version: '16'  

    #     - name: Install dependencies
    #       working-directory: ./packages/cli 
    #       run: npm install

    #     - name: Login to npm
    #       run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

    #     - name: Publish to npm
    #       working-directory: ./packages/cli
    #       run: npm publish --access public
    #       env:
    #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 