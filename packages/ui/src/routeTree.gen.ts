/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ManageIndexImport } from './routes/manage/index'
import { Route as CreateIndexImport } from './routes/create/index'
import { Route as ManageLoadImport } from './routes/manage/load'
import { Route as CreateSuccessImport } from './routes/create/success'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ManageIndexRoute = ManageIndexImport.update({
  id: '/manage/',
  path: '/manage/',
  getParentRoute: () => rootRoute,
} as any)

const CreateIndexRoute = CreateIndexImport.update({
  id: '/create/',
  path: '/create/',
  getParentRoute: () => rootRoute,
} as any)

const ManageLoadRoute = ManageLoadImport.update({
  id: '/manage/load',
  path: '/manage/load',
  getParentRoute: () => rootRoute,
} as any)

const CreateSuccessRoute = CreateSuccessImport.update({
  id: '/create/success',
  path: '/create/success',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/create/success': {
      id: '/create/success'
      path: '/create/success'
      fullPath: '/create/success'
      preLoaderRoute: typeof CreateSuccessImport
      parentRoute: typeof rootRoute
    }
    '/manage/load': {
      id: '/manage/load'
      path: '/manage/load'
      fullPath: '/manage/load'
      preLoaderRoute: typeof ManageLoadImport
      parentRoute: typeof rootRoute
    }
    '/create/': {
      id: '/create/'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateIndexImport
      parentRoute: typeof rootRoute
    }
    '/manage/': {
      id: '/manage/'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof ManageIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create/success': typeof CreateSuccessRoute
  '/manage/load': typeof ManageLoadRoute
  '/create': typeof CreateIndexRoute
  '/manage': typeof ManageIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create/success': typeof CreateSuccessRoute
  '/manage/load': typeof ManageLoadRoute
  '/create': typeof CreateIndexRoute
  '/manage': typeof ManageIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/create/success': typeof CreateSuccessRoute
  '/manage/load': typeof ManageLoadRoute
  '/create/': typeof CreateIndexRoute
  '/manage/': typeof ManageIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/create/success' | '/manage/load' | '/create' | '/manage'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/create/success' | '/manage/load' | '/create' | '/manage'
  id:
    | '__root__'
    | '/'
    | '/create/success'
    | '/manage/load'
    | '/create/'
    | '/manage/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateSuccessRoute: typeof CreateSuccessRoute
  ManageLoadRoute: typeof ManageLoadRoute
  CreateIndexRoute: typeof CreateIndexRoute
  ManageIndexRoute: typeof ManageIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateSuccessRoute: CreateSuccessRoute,
  ManageLoadRoute: ManageLoadRoute,
  CreateIndexRoute: CreateIndexRoute,
  ManageIndexRoute: ManageIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/create/success",
        "/manage/load",
        "/create/",
        "/manage/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/create/success": {
      "filePath": "create/success.tsx"
    },
    "/manage/load": {
      "filePath": "manage/load.tsx"
    },
    "/create/": {
      "filePath": "create/index.tsx"
    },
    "/manage/": {
      "filePath": "manage/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
