/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppVerifyIndexImport } from './routes/app/verify.index'
import { Route as AppRequestsIndexImport } from './routes/app/requests.index'
import { Route as AppDeployIndexImport } from './routes/app/deploy.index'
import { Route as AppDeploymentsIdImport } from './routes/app/deployments.$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => rootRoute,
} as any)

const AppVerifyIndexRoute = AppVerifyIndexImport.update({
  id: '/app/verify/',
  path: '/app/verify/',
  getParentRoute: () => rootRoute,
} as any)

const AppRequestsIndexRoute = AppRequestsIndexImport.update({
  id: '/app/requests/',
  path: '/app/requests/',
  getParentRoute: () => rootRoute,
} as any)

const AppDeployIndexRoute = AppDeployIndexImport.update({
  id: '/app/deploy/',
  path: '/app/deploy/',
  getParentRoute: () => rootRoute,
} as any)

const AppDeploymentsIdRoute = AppDeploymentsIdImport.update({
  id: '/app/deployments/$id',
  path: '/app/deployments/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof rootRoute
    }
    '/app/deployments/$id': {
      id: '/app/deployments/$id'
      path: '/app/deployments/$id'
      fullPath: '/app/deployments/$id'
      preLoaderRoute: typeof AppDeploymentsIdImport
      parentRoute: typeof rootRoute
    }
    '/app/deploy/': {
      id: '/app/deploy/'
      path: '/app/deploy'
      fullPath: '/app/deploy'
      preLoaderRoute: typeof AppDeployIndexImport
      parentRoute: typeof rootRoute
    }
    '/app/requests/': {
      id: '/app/requests/'
      path: '/app/requests'
      fullPath: '/app/requests'
      preLoaderRoute: typeof AppRequestsIndexImport
      parentRoute: typeof rootRoute
    }
    '/app/verify/': {
      id: '/app/verify/'
      path: '/app/verify'
      fullPath: '/app/verify'
      preLoaderRoute: typeof AppVerifyIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppIndexRoute
  '/app/deployments/$id': typeof AppDeploymentsIdRoute
  '/app/deploy': typeof AppDeployIndexRoute
  '/app/requests': typeof AppRequestsIndexRoute
  '/app/verify': typeof AppVerifyIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppIndexRoute
  '/app/deployments/$id': typeof AppDeploymentsIdRoute
  '/app/deploy': typeof AppDeployIndexRoute
  '/app/requests': typeof AppRequestsIndexRoute
  '/app/verify': typeof AppVerifyIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app/': typeof AppIndexRoute
  '/app/deployments/$id': typeof AppDeploymentsIdRoute
  '/app/deploy/': typeof AppDeployIndexRoute
  '/app/requests/': typeof AppRequestsIndexRoute
  '/app/verify/': typeof AppVerifyIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/deployments/$id'
    | '/app/deploy'
    | '/app/requests'
    | '/app/verify'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/app/deployments/$id'
    | '/app/deploy'
    | '/app/requests'
    | '/app/verify'
  id:
    | '__root__'
    | '/'
    | '/app/'
    | '/app/deployments/$id'
    | '/app/deploy/'
    | '/app/requests/'
    | '/app/verify/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppIndexRoute: typeof AppIndexRoute
  AppDeploymentsIdRoute: typeof AppDeploymentsIdRoute
  AppDeployIndexRoute: typeof AppDeployIndexRoute
  AppRequestsIndexRoute: typeof AppRequestsIndexRoute
  AppVerifyIndexRoute: typeof AppVerifyIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppIndexRoute: AppIndexRoute,
  AppDeploymentsIdRoute: AppDeploymentsIdRoute,
  AppDeployIndexRoute: AppDeployIndexRoute,
  AppRequestsIndexRoute: AppRequestsIndexRoute,
  AppVerifyIndexRoute: AppVerifyIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app/",
        "/app/deployments/$id",
        "/app/deploy/",
        "/app/requests/",
        "/app/verify/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app/": {
      "filePath": "app/index.tsx"
    },
    "/app/deployments/$id": {
      "filePath": "app/deployments.$id.tsx"
    },
    "/app/deploy/": {
      "filePath": "app/deploy.index.tsx"
    },
    "/app/requests/": {
      "filePath": "app/requests.index.tsx"
    },
    "/app/verify/": {
      "filePath": "app/verify.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
