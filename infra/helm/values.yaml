# global configs ===============================================================

global:
  storageClassName: gp2 # Override with "" for default (recommended in local environment)
  image:
    pullPolicy: IfNotPresent

domain:
  host: &domain_host localhost # demo.example.com
  email: email@email.com

# chain ===============================================================

chain:
  id: "override" 
  l1Rpc: "override"
  artifacts: "config/artifacts.zip"
  addresses: "config/addresses.json"

# core ===============================================================

geth:
  name: op-geth
  image:
    repository: wakeuplabs/op-geth
    tag: v0.0.4
  deployment:
    replicaCount: 1
  ports:
    rpc: 8545 
    ws: 8546
    rpcAuth: 9551
    metrics: 7300
  datadir: /app/data/datadir/data
  storage:
    sequencer: 5Gi
    replica: 5Gi

node:
  name: op-node
  image:
    repository: wakeuplabs/op-node
    tag: v0.0.4
  config:
    p2pEnabled: false
  ports:
    rpc: 7545
    p2p: 9222
    metrics: 7300

batcher:
  name: op-batcher
  image:
    repository: wakeuplabs/op-batcher
    tag: v0.0.4
  config:
    privateKey: ""
  ports:
    rpc: 6545 
    metrics: 7300

proposer:
  name: op-proposer
  image:
    repository: wakeuplabs/op-proposer
    tag: v0.0.4
  config:
    privateKey: ""
  ports:
    rpc: 5545 
    metrics: 7300

proxyd:
  name: proxyd
  image:
    repository: us-docker.pkg.dev/oplabs-tools-artifacts/images/proxyd
    tag: latest
  service:
    port: 8080
    targetPort: 8080
  ingress:
    nodePath: /rpc
  redis:
    name: proxyd-redis
    image:
      repository: redis
      tag: latest

# monitoring ===============================================================

monitoring:
  enabled: false

grafana:
  enabled: true

  adminUser: admin
  adminPassword: admin

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://{{ .Release.Name }}-prometheus-server
          isDefault: true

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default

  dashboards:
    default:
      prometheus:
        gnetId: 315
        revision: 1
        datasource: Prometheus

  ingress:
    enabled: true
    path: /monitoring(/|$)(.*)
    annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    labels: {}
    hosts:
      - *domain_host

  grafana.ini:
    server:
      root_url: "%(protocol)s://%(domain)s/monitoring"  # Dynamically adapts to ingress host

prometheus:
  enabled: true
  alertmanager:
    enabled: false
  pushgateway:
    enabled: false
  server:
    enabled: true
    service:
      type: ClusterIP


# explorer ===============================================================

explorer:
  enabled: true

blockscout:
  postgres:
    dbName: bs
    user: bs-db-user
    password: bs-db-password
    image:
      repository: postgres
      tag: latest
    storage: 5Gi

blockscout-stack:
  blockscout:
    ingress:
      enabled: true
      className: nginx
      hostname: localhost

    env:
      ECTO_USE_SSL: "false"
      ETHEREUM_JSONRPC_VARIANT: "geth"
      ETHEREUM_JSONRPC_HTTP_URL: "http://op-geth-replica-service:8545"
      ETHEREUM_JSONRPC_WS_URL: "ws://op-geth-replica-service:8546"
      NETWORK: "Optimism"
      CHAIN_ID: "1201"
    extraEnv:
      - name: DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: blockscout-secret
            key: DATABASE_URL
  frontend:
    ingress:
      enabled: true
      className: nginx
      hostname: localhost
    env:
      NEXT_PUBLIC_API_PROTOCOL: "https" # Change to http if using localhost
