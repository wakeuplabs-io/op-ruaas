domain:
  host: localhost # demo.example.com
  email: email@email.com
chain:
  id: "11155420"
global:
  image:
    pullPolicy: IfNotPresent

demo:
  ingress:
    path: /demo
  deployment:
    name: demo-deployment
    appLabel: demo-app
    replicaCount: 1
    containerPort: 80
    containerName: demo
    image:
      repository: nginx
      tag: latest
  service:
    name: demo-service
    port: 80
    targetPort: 80

geth:
  name: op-geth
  deployment:
    replicaCount: 2
  image:
    repository: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth
    tag: latest
  sequencer:
    args:
      - "--datadir=/db"
      - "--verbosity=-3"
      - "--http"
      - "--http.corsdomain=*"
      - "--http.vhosts=*"
      - "--http.addr=0.0.0.0"
      - "--http.port=8545"
      - "--http.api=web3,debug,eth,txpool,net,engine,miner"
      - "--ws"
      - "--ws.addr=0.0.0.0"
      - "--ws.port=8546"
      - "--ws.origins=*"
      - "--ws.api=debug,eth,txpool,net,engine,miner"
      - "--syncmode=full"
      - "--nodiscover"
      - "--maxpeers=0"
      - "--rpc.allow-unprotected-txs"
      - "--authrpc.addr=0.0.0.0"
      - "--authrpc.port=8551"
      - "--authrpc.vhosts=*"
      - "--authrpc.jwtsecret=/config/jwt-secret.txt"
      - "--gcmode=archive"
      - "--state.scheme=hash"
      - "--metrics"
      - "--metrics.addr=0.0.0.0"
      - "--metrics.port=606"
  replicas:
    args:
      - "--datadir=/db"
      - "--verbosity=-3"
      - "--http"
      - "--http.corsdomain=*"
      - "--http.vhosts=*"
      - "--http.addr=0.0.0.0"
      - "--http.port=8545"
      - "--http.api=web3,debug,eth,txpool,net,engine,miner"
      - "--ws"
      - "--ws.addr=0.0.0.0"
      - "--ws.port=8546"
      - "--ws.origins=*"
      - "--ws.api=debug,eth,txpool,net,engine,miner"
      - "--syncmode=full"
      - "--nodiscover"
      - "--maxpeers=0"
      - "--rpc.allow-unprotected-txs"
      - "--authrpc.addr=0.0.0.0"
      - "--authrpc.port=8551"
      - "--authrpc.vhosts=*"
      - "--authrpc.jwtsecret=/config/jwt-secret.txt"
      - "--gcmode=archive"
      - "--state.scheme=hash"
      - "--metrics"
      - "--metrics.addr=0.0.0.0"
      - "--metrics.port=606"

node:
  name: op-node
  image:
    repository: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node
    tag: latest
  sequencer:
    args:
        - "--sequencer.enabled"
        - "--sequencer.l1-confs=0"
        - "--l2=http://127.0.0.1:8551" # ok?
        - "--l2.jwt-secret={{ .Values.geth.jwtSecretPath }}" # understand path to generated jwt-secret
        - "--verifier.l1-confs=0"
        - "--rollup.config=/app/data/configurations/rollup.json" # hardcoded on configmap
        - "--metrics.enabled"
        - "--metrics.addr=0.0.0.0"
        - "--metrics.port=7300"
  replicas:
    args:
      - "--l2=http://127.0.0.1:8551" # ok?
      - "--l2.jwt-secret={{ .Values.geth.jwtSecretPath }}" # understand path to generated jwt-secret
      - "--verifier.l1-confs=0"
      - "--rollup.config=/app/data/configurations/rollup.json" # hardcoded on configmap
      - "--metrics.enabled"
      - "--metrics.addr=0.0.0.0"
      - "--metrics.port=7300"
batcher:
  name: op-batcher
  image:
    repository: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-batcher
    tag: latest

proposer:
  name: op-proposer
  image:
    repository: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-proposer
    tag: latest


proxyd:
  name: proxyd
  image:
    repository: us-docker.pkg.dev/oplabs-tools-artifacts/images/proxyd
    tag: latest
  service:
    port: 8080
    targetPort: 8080
  ingress:
    path: /proxyd
  config:
    rpc_url_alchemy: "https://opt-sepolia.g.alchemy.com/v2/5600JheK0TTROlJ6O0wrc0gF3W9wIqm8"
    ws_url_alchemy: "wss://opt-sepolia.g.alchemy.com/v2/5600JheK0TTROlJ6O0wrc0gF3W9wIqm8"

redis:
  name: proxyd-redis
  image:
    repository: redis
    tag: latest

explorer:
  enabled: true

monitoring:
  enabled: true

kube-prometheus-stack:
  grafana:
    ingress:
      enabled: true
      ingressClassName: nginx
      paths: 
        - /grafana
      hosts:
        - "localhost"
  prometheus:
    serviceAccount:
      name: "" # prometheus
  prometheus-node-exporter:
    hostRootFsMount:
      enabled: false # Workaround for Error: path / is mounted on / but it is not a shared or slave mount
      mountPropagation: HostToContainer

blockscout-stack:
  blockscout:
    extraEnv:
      - name: ECTO_USE_SSL
        value: "false"
      - name: DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: blockscout-secret
            key: DATABASE_URL
  frontend:
    ingress:
      enabled: true
      className: nginx
      paths: 
        - path: /explorer
      hostname: localhost
    extraEnv:
      - name: NEXT_PUBLIC_APP_HOST
        value: localhost
      - name: NEXT_PUBLIC_API_HOST
        value: localhost

blockscout:
  postgres:
    dbName: blockscout
    user: userShouldBeSet
    password: passwordShouldBeSet
    image:
      repository: postgres
      tag: latest
