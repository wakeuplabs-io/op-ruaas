apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.node.name }}-replica-deployment
  labels:
    app: {{ .Values.node.name }}-replica
spec:
  replicas: {{ .Values.geth.deployment.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.node.name }}-replica
  template:
    metadata:
      labels:
        app: {{ .Values.node.name }}-replica
    spec:
      containers:
        - name: {{ .Values.node.name }}-replica
          image: {{ .Values.node.image.repository }}:{{ .Values.node.image.tag }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          command: [ "/usr/local/bin/op-node" ]
          args: 
            {{- range .Values.node.replicas.args }}
            - {{ . | quote }}
            {{- end }}
            - "--l1={{ .Values.geth.name }}-replica:8545"
          ports:
            - name: http
              containerPort: 8547
            - name: p2p
              containerPort: 9221
          envFrom:
            - configMapRef:
                name: {{ .Values.node.name }}-replica-env
          volumeMounts:
            - name: bin-data
              mountPath: /app/data/bin
            - name: configurations
              mountPath: /app/data/configurations
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 15
            periodSeconds: 20
      volumes:
        - name: bin-data
          persistentVolumeClaim:
            claimName: {{ .Values.node.name }}-replica-pvc-bin
        - name: configurations
          configMap:
            name: {{ .Values.node.name }}-replica-env