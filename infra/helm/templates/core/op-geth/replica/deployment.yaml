apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.geth.name }}-replica-deployment
  labels:
    app: {{ .Values.geth.name }}-replica
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.geth.name }}-replica
  template:
    metadata:
      labels:
        app: {{ .Values.geth.name }}-replica
    spec:
      initContainers:
        - name: geth-init
          image: {{ .Values.geth.image.repository }}:{{ .Values.geth.image.tag }}
          command: ["/bin/sh", "-c"]
          args:
            - |
                if [ ! -d "{{ .Values.geth.datadir }}" ]; then
                  echo "Initializing geth using /app/data/configurations/genesis.json genesis"
                  /usr/local/bin/geth \
                    --verbosity=3 \
                    --datadir={{ .Values.geth.datadir }} \
                    --state.scheme=hash \
                    init /app/data/configurations/genesis.json
                else 
                  echo "Skipping initialization, geth datadir is not empty"
                fi
          volumeMounts:
            - name: datadir
              mountPath: /app/data/datadir
            - name: configurations
              mountPath: /app/data/configurations
        - name: bootnode
          image: busybox:1.36.1
          command: ["/bin/sh", "-c"]
          args:
            - |
                while true; do
                  SEQUENCER_ENODE=$(wget -qO- --timeout=1 --header="Content-Type: application/json" --post-data='{"jsonrpc":"2.0","method":"admin_nodeInfo","params":[],"id":1}' http://{{ .Values.geth.name }}-sequencer-service:{{ .Values.geth.ports.rpcHttp }} | sed -n 's/.*"enode":"\([^"]*\)".*/\1/p' 2>/dev/null)
                
                  if [ -n "$SEQUENCER_ENODE" ] && [ "$SEQUENCER_ENODE" != "null" ]; then
                    SEQUENCER_ENODE=$(echo "$SEQUENCER_ENODE" | sed 's/127\.0\.0\.1/{{ .Values.geth.name }}-sequencer-service/')
                    
                    echo "Sequencer enode found: $SEQUENCER_ENODE"
                    echo "$SEQUENCER_ENODE" > /app/data/bootnode/sequencer-enode
                    break
                  else
                    echo "Unable to fetch SEQUENCER_ENODE" 
                    sleep 2
                  fi
                done
          volumeMounts:
            - name: bootnode
              mountPath: /app/data/bootnode
      containers:
        - name: {{ .Values.geth.name }}-replica
          image: {{ .Values.geth.image.repository }}:{{ .Values.geth.image.tag }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
                /usr/local/bin/geth \
                  --verbosity=3 \
                  --networkid={{ .Values.chain.id }} \
                  --datadir={{ .Values.geth.datadir }} \
                  --syncmode=full \
                  --gcmode=archive \
                  --port={{ .Values.geth.ports.p2p }} \
                  --bootnodes=$(cat /app/data/bootnode/sequencer-enode) \
                  --rollup.sequencerhttp=http://op-geth-sequencer-service:8545 \
                  --rpc.allow-unprotected-txs \
                  --rollup.disabletxpoolgossip=True \
                  --state.scheme=hash \
                  --http \
                  --http.corsdomain=* \
                  --http.vhosts=* \
                  --http.addr=0.0.0.0 \
                  --http.port={{ .Values.geth.ports.rpcHttp }} \
                  --http.api=admin,web3,debug,eth,txpool,net,engine \
                  --ws \
                  --ws.addr=0.0.0.0 \
                  --ws.port={{ .Values.geth.ports.rpcWs }} \
                  --ws.origins=* \
                  --ws.api=admin,debug,eth,txpool,net,engine \
                  --metrics \
                  --metrics.addr=0.0.0.0 \
                  --metrics.port={{ .Values.geth.ports.metrics }} \
                  --authrpc.addr=0.0.0.0 \
                  --authrpc.port={{ .Values.geth.ports.rpcAuth }} \
                  --authrpc.vhosts=* \
                  --authrpc.jwtsecret=/app/data/configurations/jwt-secret.txt 
          ports:
            - containerPort: {{ .Values.geth.ports.rpcHttp }}
            - containerPort: {{ .Values.geth.ports.rpcWs }}
            - containerPort: {{ .Values.geth.ports.rpcAuth }}
            - containerPort: {{ .Values.geth.ports.metrics }}
          volumeMounts:
            - name: datadir
              mountPath: /app/data/datadir
            - name: configurations
              mountPath: /app/data/configurations
            - name: bootnode
              mountPath: /app/data/bootnode
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: {{ .Values.geth.name }}-replica-pvc-datadir
        - name: configurations
          persistentVolumeClaim:
            claimName: {{ .Values.geth.name }}-replica-pvc-configurations
        - name: bootnode
          persistentVolumeClaim:
            claimName: {{ .Values.geth.name }}-replica-pvc-bootnode